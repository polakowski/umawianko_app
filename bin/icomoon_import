#!/usr/bin/env ruby

location = ARGV.first || '~/Desktop'
dir_name = 'um-icons'

class String
  def colorize(n)
    "\e[#{n}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def cyan
    colorize(36)
  end
end

def system(command)
  Kernel.system(command, out: File::NULL, err: File::NULL)
end

def error(msg)
  puts "#{'Error:'.red} #{msg}"
  exit 1
end

def warning(msg)
  puts "#{'Warning:'.red} #{msg}"
end

def operation(name)
  print "#{name}..."
  if yield
    puts ' ok'.green
  else
    puts ' error'.red
    exit 1
  end
end

class Icon
  def initialize(attrs)
    @name    = attrs[0]
    @content = attrs[1]
  end

  attr_reader :name, :content
end

# SCRIPT START

unless defined? Rails
  error('Run this script via `bundle exec rails runner bin/icomoon_import`.')
end

source = File.expand_path("#{location}/#{dir_name}")

unless system("ls #{source}")
  error "Directory does not exist: #{location}/#{dir_name}"
end

target = File.expand_path('../app/assets/fonts', File.dirname(__FILE__))
icons_dir = File.expand_path('../app/assets/stylesheets/shared', File.dirname(__FILE__))

%w[eot ttf woff].each do |ext|
  operation "Copying .#{ext} file" do
    system(%W(
      cp
      \"#{source}/fonts/um-icons.#{ext}\"
      \"#{target}/um-icons.#{ext}\"
    ).join(' '))
  end
end

operation 'Copying icomoon.json manifest' do
  system(%W(
    cp
    \"#{source}/selection.json\"
    \"#{target}/icomoon.json\"
  ).join(' '))
end

css_icon_regex = /\&--([0-9a-z_\-]+)\:before \{\s+content: \"\\(e[0-9a-z]+)\"/
css_icons      = File.read("#{icons_dir}/_icons.scss").scan(css_icon_regex)

xml_icon_regex = /unicode=\"&#x([0-9a-z]+);\" glyph-name=\"([0-9a-z_\-]+)\"/
xml_icons      = File.read("#{source}/fonts/um-icons.svg").scan(xml_icon_regex).map(&:reverse)

css_icons = css_icons.map { |attrs| Icon.new(attrs) }
xml_icons = xml_icons.map { |attrs| Icon.new(attrs) }

puts ''

unused_icons = css_icons.select do |css_icon|
  xml_icons.map(&:content).exclude? css_icon.content
end

if (n = unused_icons.count).nonzero?
  unused_icons_info = unused_icons.map(&:name).join(', ')
  warning "#{n} unused #{n == 1 ? 'icon' : 'icons'} detected: #{unused_icons_info}."
  puts ''
end

icons_missing_in_css = xml_icons.select do |xml_icon|
  css_icons.map(&:content).exclude? xml_icon.content
end

if icons_missing_in_css.empty?
  puts 'Your _icons.scss is up to date!'
  exit 0
end

n = icons_missing_in_css.count

puts 'Add this to your _icons.scss file:'
puts ''

icons_info = icons_missing_in_css.map do |icon|
  <<~STRING
    &--#{icon.name}:before {
      content: "\\#{icon.content}";
    }
  STRING
end

puts icons_info.join("\n").cyan

exit 0
